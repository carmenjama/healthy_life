package com.healthLife.DAO.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.healthLife.DAO.model.Diario;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DIARIO.
*/
public class DiarioDao extends AbstractDao<Diario, Long> {

    public static final String TABLENAME = "DIARIO";

    /**
     * Properties of entity Diario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_admin = new Property(1, Long.class, "id_admin", false, "ID_ADMIN");
        public final static Property Fecha = new Property(2, java.util.Date.class, "fecha", false, "FECHA");
        public final static Property Tot_calorias = new Property(3, Double.class, "tot_calorias", false, "TOT_CALORIAS");
        public final static Property Tot_grasa = new Property(4, Double.class, "tot_grasa", false, "TOT_GRASA");
        public final static Property Tot_proteina = new Property(5, Double.class, "tot_proteina", false, "TOT_PROTEINA");
        public final static Property Tot_carbo = new Property(6, Double.class, "tot_carbo", false, "TOT_CARBO");
    };


    public DiarioDao(DaoConfig config) {
        super(config);
    }
    
    public DiarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DIARIO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_ADMIN' INTEGER," + // 1: id_admin
                "'FECHA' INTEGER," + // 2: fecha
                "'TOT_CALORIAS' REAL," + // 3: tot_calorias
                "'TOT_GRASA' REAL," + // 4: tot_grasa
                "'TOT_PROTEINA' REAL," + // 5: tot_proteina
                "'TOT_CARBO' REAL);"); // 6: tot_carbo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DIARIO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Diario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long id_admin = entity.getId_admin();
        if (id_admin != null) {
            stmt.bindLong(2, id_admin);
        }
 
        java.util.Date fecha = entity.getFecha();
        if (fecha != null) {
            stmt.bindLong(3, fecha.getTime());
        }
 
        Double tot_calorias = entity.getTot_calorias();
        if (tot_calorias != null) {
            stmt.bindDouble(4, tot_calorias);
        }
 
        Double tot_grasa = entity.getTot_grasa();
        if (tot_grasa != null) {
            stmt.bindDouble(5, tot_grasa);
        }
 
        Double tot_proteina = entity.getTot_proteina();
        if (tot_proteina != null) {
            stmt.bindDouble(6, tot_proteina);
        }
 
        Double tot_carbo = entity.getTot_carbo();
        if (tot_carbo != null) {
            stmt.bindDouble(7, tot_carbo);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Diario readEntity(Cursor cursor, int offset) {
        Diario entity = new Diario( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id_admin
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // fecha
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // tot_calorias
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // tot_grasa
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // tot_proteina
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6) // tot_carbo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Diario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_admin(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFecha(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setTot_calorias(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setTot_grasa(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setTot_proteina(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setTot_carbo(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Diario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Diario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
