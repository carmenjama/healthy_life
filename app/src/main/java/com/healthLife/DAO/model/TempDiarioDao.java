package com.healthLife.DAO.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.healthLife.DAO.model.TempDiario;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEMP_DIARIO.
*/
public class TempDiarioDao extends AbstractDao<TempDiario, Long> {

    public static final String TABLENAME = "TEMP_DIARIO";

    /**
     * Properties of entity TempDiario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_diario = new Property(1, Long.class, "id_diario", false, "ID_DIARIO");
        public final static Property Id_lista = new Property(2, Long.class, "id_lista", false, "ID_LISTA");
        public final static Property Id_alimento = new Property(3, Long.class, "id_alimento", false, "ID_ALIMENTO");
        public final static Property Nombre = new Property(4, String.class, "nombre", false, "NOMBRE");
        public final static Property Calorias = new Property(5, Double.class, "calorias", false, "CALORIAS");
        public final static Property Carbohidratos = new Property(6, Double.class, "carbohidratos", false, "CARBOHIDRATOS");
        public final static Property Grasas = new Property(7, Double.class, "grasas", false, "GRASAS");
        public final static Property Proteinas = new Property(8, Double.class, "proteinas", false, "PROTEINAS");
        public final static Property Total = new Property(9, Double.class, "total", false, "TOTAL");
        public final static Property Porcion = new Property(10, Double.class, "porcion", false, "PORCION");
    };


    public TempDiarioDao(DaoConfig config) {
        super(config);
    }
    
    public TempDiarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TEMP_DIARIO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_DIARIO' INTEGER," + // 1: id_diario
                "'ID_LISTA' INTEGER," + // 2: id_lista
                "'ID_ALIMENTO' INTEGER," + // 3: id_alimento
                "'NOMBRE' TEXT," + // 4: nombre
                "'CALORIAS' REAL," + // 5: calorias
                "'CARBOHIDRATOS' REAL," + // 6: carbohidratos
                "'GRASAS' REAL," + // 7: grasas
                "'PROTEINAS' REAL," + // 8: proteinas
                "'TOTAL' REAL," + // 9: total
                "'PORCION' REAL);"); // 10: porcion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEMP_DIARIO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TempDiario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long id_diario = entity.getId_diario();
        if (id_diario != null) {
            stmt.bindLong(2, id_diario);
        }
 
        Long id_lista = entity.getId_lista();
        if (id_lista != null) {
            stmt.bindLong(3, id_lista);
        }
 
        Long id_alimento = entity.getId_alimento();
        if (id_alimento != null) {
            stmt.bindLong(4, id_alimento);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(5, nombre);
        }
 
        Double calorias = entity.getCalorias();
        if (calorias != null) {
            stmt.bindDouble(6, calorias);
        }
 
        Double carbohidratos = entity.getCarbohidratos();
        if (carbohidratos != null) {
            stmt.bindDouble(7, carbohidratos);
        }
 
        Double grasas = entity.getGrasas();
        if (grasas != null) {
            stmt.bindDouble(8, grasas);
        }
 
        Double proteinas = entity.getProteinas();
        if (proteinas != null) {
            stmt.bindDouble(9, proteinas);
        }
 
        Double total = entity.getTotal();
        if (total != null) {
            stmt.bindDouble(10, total);
        }
 
        Double porcion = entity.getPorcion();
        if (porcion != null) {
            stmt.bindDouble(11, porcion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TempDiario readEntity(Cursor cursor, int offset) {
        TempDiario entity = new TempDiario( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id_diario
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // id_lista
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // id_alimento
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nombre
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // calorias
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // carbohidratos
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // grasas
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // proteinas
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // total
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10) // porcion
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TempDiario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_diario(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setId_lista(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setId_alimento(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setNombre(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCalorias(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setCarbohidratos(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setGrasas(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setProteinas(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setTotal(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setPorcion(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TempDiario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TempDiario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
