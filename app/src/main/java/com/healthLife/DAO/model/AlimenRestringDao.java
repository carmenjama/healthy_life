package com.healthLife.DAO.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.healthLife.DAO.model.AlimenRestring;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ALIMEN_RESTRING.
*/
public class AlimenRestringDao extends AbstractDao<AlimenRestring, Long> {

    public static final String TABLENAME = "ALIMEN_RESTRING";

    /**
     * Properties of entity AlimenRestring.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_enfermedad = new Property(1, Long.class, "id_enfermedad", false, "ID_ENFERMEDAD");
        public final static Property Id_alimento = new Property(2, Long.class, "id_alimento", false, "ID_ALIMENTO");
    };


    public AlimenRestringDao(DaoConfig config) {
        super(config);
    }
    
    public AlimenRestringDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ALIMEN_RESTRING' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_ENFERMEDAD' INTEGER," + // 1: id_enfermedad
                "'ID_ALIMENTO' INTEGER);"); // 2: id_alimento
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ALIMEN_RESTRING'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AlimenRestring entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long id_enfermedad = entity.getId_enfermedad();
        if (id_enfermedad != null) {
            stmt.bindLong(2, id_enfermedad);
        }
 
        Long id_alimento = entity.getId_alimento();
        if (id_alimento != null) {
            stmt.bindLong(3, id_alimento);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AlimenRestring readEntity(Cursor cursor, int offset) {
        AlimenRestring entity = new AlimenRestring( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id_enfermedad
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // id_alimento
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AlimenRestring entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_enfermedad(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setId_alimento(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AlimenRestring entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AlimenRestring entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
