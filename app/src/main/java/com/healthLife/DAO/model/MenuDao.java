package com.healthLife.DAO.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.healthLife.DAO.model.Menu;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MENU.
*/
public class MenuDao extends AbstractDao<Menu, Long> {

    public static final String TABLENAME = "MENU";

    /**
     * Properties of entity Menu.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NomDes = new Property(1, String.class, "nomDes", false, "NOM_DES");
        public final static Property NomAlmu = new Property(2, String.class, "nomAlmu", false, "NOM_ALMU");
        public final static Property NomMeri = new Property(3, String.class, "nomMeri", false, "NOM_MERI");
    };


    public MenuDao(DaoConfig config) {
        super(config);
    }
    
    public MenuDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MENU' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NOM_DES' TEXT," + // 1: nomDes
                "'NOM_ALMU' TEXT," + // 2: nomAlmu
                "'NOM_MERI' TEXT);"); // 3: nomMeri
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MENU'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Menu entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nomDes = entity.getNomDes();
        if (nomDes != null) {
            stmt.bindString(2, nomDes);
        }
 
        String nomAlmu = entity.getNomAlmu();
        if (nomAlmu != null) {
            stmt.bindString(3, nomAlmu);
        }
 
        String nomMeri = entity.getNomMeri();
        if (nomMeri != null) {
            stmt.bindString(4, nomMeri);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Menu readEntity(Cursor cursor, int offset) {
        Menu entity = new Menu( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nomDes
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nomAlmu
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // nomMeri
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Menu entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNomDes(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNomAlmu(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNomMeri(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Menu entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Menu entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
