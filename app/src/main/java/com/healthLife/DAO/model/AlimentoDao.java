package com.healthLife.DAO.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.healthLife.DAO.model.Alimento;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ALIMENTO.
*/
public class AlimentoDao extends AbstractDao<Alimento, Long> {

    public static final String TABLENAME = "ALIMENTO";

    /**
     * Properties of entity Alimento.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_categoria = new Property(1, Long.class, "id_categoria", false, "ID_CATEGORIA");
        public final static Property Nombre = new Property(2, String.class, "nombre", false, "NOMBRE");
        public final static Property Calorias = new Property(3, Double.class, "calorias", false, "CALORIAS");
        public final static Property Carbohidratos = new Property(4, Double.class, "carbohidratos", false, "CARBOHIDRATOS");
        public final static Property Grasas = new Property(5, Double.class, "grasas", false, "GRASAS");
        public final static Property Proteinas = new Property(6, Double.class, "proteinas", false, "PROTEINAS");
    };


    public AlimentoDao(DaoConfig config) {
        super(config);
    }
    
    public AlimentoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ALIMENTO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_CATEGORIA' INTEGER," + // 1: id_categoria
                "'NOMBRE' TEXT," + // 2: nombre
                "'CALORIAS' REAL," + // 3: calorias
                "'CARBOHIDRATOS' REAL," + // 4: carbohidratos
                "'GRASAS' REAL," + // 5: grasas
                "'PROTEINAS' REAL);"); // 6: proteinas
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ALIMENTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Alimento entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long id_categoria = entity.getId_categoria();
        if (id_categoria != null) {
            stmt.bindLong(2, id_categoria);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(3, nombre);
        }
 
        Double calorias = entity.getCalorias();
        if (calorias != null) {
            stmt.bindDouble(4, calorias);
        }
 
        Double carbohidratos = entity.getCarbohidratos();
        if (carbohidratos != null) {
            stmt.bindDouble(5, carbohidratos);
        }
 
        Double grasas = entity.getGrasas();
        if (grasas != null) {
            stmt.bindDouble(6, grasas);
        }
 
        Double proteinas = entity.getProteinas();
        if (proteinas != null) {
            stmt.bindDouble(7, proteinas);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Alimento readEntity(Cursor cursor, int offset) {
        Alimento entity = new Alimento( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id_categoria
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nombre
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // calorias
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // carbohidratos
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // grasas
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6) // proteinas
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Alimento entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_categoria(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCalorias(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCarbohidratos(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setGrasas(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setProteinas(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Alimento entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Alimento entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
