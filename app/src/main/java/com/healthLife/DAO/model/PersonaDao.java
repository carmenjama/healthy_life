package com.healthLife.DAO.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.healthLife.DAO.model.Persona;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PERSONA.
*/
public class PersonaDao extends AbstractDao<Persona, Long> {

    public static final String TABLENAME = "PERSONA";

    /**
     * Properties of entity Persona.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nombre = new Property(1, String.class, "nombre", false, "NOMBRE");
        public final static Property Altura = new Property(2, Double.class, "altura", false, "ALTURA");
        public final static Property Peso = new Property(3, Double.class, "peso", false, "PESO");
        public final static Property Sexo = new Property(4, String.class, "sexo", false, "SEXO");
        public final static Property Edad = new Property(5, String.class, "edad", false, "EDAD");
        public final static Property Est_vida = new Property(6, String.class, "est_vida", false, "EST_VIDA");
    };


    public PersonaDao(DaoConfig config) {
        super(config);
    }
    
    public PersonaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PERSONA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NOMBRE' TEXT," + // 1: nombre
                "'ALTURA' REAL," + // 2: altura
                "'PESO' REAL," + // 3: peso
                "'SEXO' TEXT," + // 4: sexo
                "'EDAD' TEXT," + // 5: edad
                "'EST_VIDA' TEXT);"); // 6: est_vida
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PERSONA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Persona entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(2, nombre);
        }
 
        Double altura = entity.getAltura();
        if (altura != null) {
            stmt.bindDouble(3, altura);
        }
 
        Double peso = entity.getPeso();
        if (peso != null) {
            stmt.bindDouble(4, peso);
        }
 
        String sexo = entity.getSexo();
        if (sexo != null) {
            stmt.bindString(5, sexo);
        }
 
        String edad = entity.getEdad();
        if (edad != null) {
            stmt.bindString(6, edad);
        }
 
        String est_vida = entity.getEst_vida();
        if (est_vida != null) {
            stmt.bindString(7, est_vida);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Persona readEntity(Cursor cursor, int offset) {
        Persona entity = new Persona( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nombre
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // altura
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // peso
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sexo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // edad
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // est_vida
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Persona entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNombre(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAltura(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setPeso(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setSexo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEdad(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEst_vida(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Persona entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Persona entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
